@use "../../styles/variables.scss" as *;

.toc {
  display: flex;
  flex-direction: column;
}

nav#toc-vertical {
  display: flex;
  flex-direction: column;
  align-items: flex-end;

  position: fixed;
  top: 50%;
  right: 1rem;
  transform: translateY(-100%);
  cursor: pointer;

  @media all and ($tablet) {
    left: 1rem;
    right: unset;
    align-items: flex-start;
  }

  // Create a cubic-bezier function for width scaling
  @function scale-width($i) {
    @return 2rem * (1 - $i * 0.35);
  }

  @for $i from 0 through 5 {
    & > .depth-#{$i} {
      background-color: var(--dark);
      height: 2px;
      margin-top: 0.45rem;
      margin-bottom: 0.45rem;

      box-shadow: none;
      border-radius: 2px;
      margin-left: 0px;

      width: scale-width($i);
      opacity: 0.35;
      transition:
        0.5s ease opacity,
        0.3s ease color,
        0.3s ease background,
        0.2s ease width;
      &.in-view {
        opacity: 0.75;
      }

      &:hover {
        background-color: var(--secondary);
        box-shadow: 0 0 2px var(--secondary);
        width: scale-width($i) * 1.35;
      }
    }
  }
}

button#toc {
  background-color: transparent;
  border: none;
  text-align: left;
  cursor: pointer;
  padding: 0;
  color: var(--dark);
  display: flex;
  align-items: center;

  & h3 {
    font-size: 1rem;
    display: inline-block;
    margin: 0;
  }
}

#toc-content {
  list-style: none;
  overflow: hidden;
  overflow-y: auto;
  max-height: 100%;
  transition:
    max-height 0.35s ease,
    visibility 0s linear 0s;
  position: relative;
  visibility: visible;

  & ul {
    list-style: none;
    padding: 0;
    & > li > a {
      color: var(--dark);
      opacity: 0.35;
      transition:
        0.5s ease opacity,
        0.3s ease color;
      &.in-view {
        opacity: 0.75;
      }
    }
  }

  > ul.overflow {
    width: 100%;
    position: relative;
  }

  @for $i from 0 through 6 {
    .depth-#{$i} {
      margin-left: calc(#{$i} * 1rem);
      transition:
        0.5s ease opacity,
        0.3s ease color;

      // Vertical line for depth > 0
      @if $i > 0 {
        position: relative;
        --pseudo-opacity: 0.35;
        --pseudo-bg: var(--gray);

        &.in-view {
          --pseudo-opacity: 0.75;
        }

        &::before {
          content: "";
          position: absolute;
          left: -0.8rem;
          top: 0;
          bottom: 0;
          width: 1px;
          background-color: var(--pseudo-bg);
          opacity: var(--pseudo-opacity);
        }

        & ~ .depth-#{$i - 1} {
          &:first-of-type {
            margin-top: 0.2rem;
          }
        }

        &:last-of-type,
        &:has(+ .depth-#{$i - 1}),
        &:has(+ .depth-#{$i + 1}) {
          &::after {
            content: "";
            position: absolute;
            left: -0.8rem;
            bottom: 0;
            width: calc(#{$i+1} * 0.8rem);
            height: 1px;
            background-color: var(--pseudo-bg);
            opacity: var(--pseudo-opacity);
          }
        }
      }
    }
  }
}
