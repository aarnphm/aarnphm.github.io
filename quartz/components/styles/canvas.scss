@use "sass:map";
@use "../../styles/variables.scss" as *;

$canvas-bg: var(--light);
$canvas-border: var(--gray);
$canvas-shadow: 0 18px 40px rgba(0, 0, 0, 0.12);
$label-bg: var(--light);
$label-color: var(--gray);
$label-border: var(--lightgray);

// Node type styles
$node-type-styles: (
  text: (
    fill: var(--light),
    stroke: var(--gray),
  ),
  file: (
    fill: var(--light),
    stroke: var(--gray),
    opacity: 0.9,
  ),
  link: (
    fill: var(--secondary),
    stroke: var(--gray),
    opacity: 0.8,
  ),
  group: (
    fill: var(--lightgray),
    stroke: var(--gray),
    opacity: 0.3,
    dash: 5 5,
  ),
);

// Obsidian canvas color accents https://jsoncanvas.org/spec/1.0/
$canvas-accents: (
  // red
  1: var(--rose),
  // orange
  2: var(--love),
  // yellow
  3: var(--gold),
  // green
  4: var(--lime),
  // blue
  5: var(--foam),
  // purple
  6: var(--iris)
);

// Mixins
@mixin node-rect($fill, $stroke, $opacity: null, $dash: null) {
  .node-bg {
    fill: $fill;
    stroke: $stroke;
    stroke-width: 2px;
    @if $opacity != null {
      fill-opacity: $opacity;
    }
    @if $dash != null {
      stroke-dasharray: $dash;
    }
    transition: stroke 0.2s ease;
  }
  .node-border-overlay {
    stroke: $stroke;
    @if $dash != null {
      stroke-dasharray: $dash;
    }
  }
}

@mixin md-body() {
  color: var(--dark);
  text-align: left;
  white-space: normal;
  word-wrap: break-word;
  overflow-wrap: break-word;

  p {
    margin: 0.5em 0;
    &:first-child {
      margin-top: 0;
    }
    &:last-child {
      margin-bottom: 0;
    }
  }

  strong,
  b {
    font-weight: 600;
  }
  em,
  i {
    font-style: italic;
  }

  code {
    background: var(--lightgray);
    padding: 0.1em 0.3em;
    border-radius: 3px;
    font-family: var(--codeFont);
    font-size: 0.9em;
  }

  pre {
    background: var(--lightgray);
    padding: 0.5em;
    border-radius: 4px;
    overflow-x: auto;
    margin: 0.5em 0;
    code {
      background: transparent;
      padding: 0;
    }
  }

  ul,
  ol {
    margin: 0.5em 0;
    padding-left: 1.5em;
  }

  a {
    color: var(--secondary);
    text-decoration: underline;
    &:hover {
      color: var(--tertiary);
    }
  }

  blockquote {
    padding-left: 0.75em;
    margin: 0.5em 0;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0.75em 0 0.5em;
    font-weight: 600;
    line-height: 1.3;
    &:first-child {
      margin-top: 0;
    }
  }
  h1 {
    font-size: 1.4em;
  }
  h2 {
    font-size: 1.2em;
  }
  h3 {
    font-size: 1.1em;
  }
  h4,
  h5,
  h6 {
    font-size: 1em;
  }
}

// Page-level adjustments
[data-is-canvas="true"] {
  overflow: hidden;
  height: 100vh;
  .main-col {
    grid-column: 3/-3;
  }
}

.canvas-component,
.canvas-embed {
  width: 100%;
  height: 100%;
  position: relative;
}

%canvas-box {
  width: 100%;
  height: 95%;
  min-height: 400px;
  min-width: 400px;
  background: $canvas-bg;
  border: 1px solid $canvas-border;
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  box-shadow: $canvas-shadow;

  svg:not(a[data-role="anchor"] *):not([class~="external-icon"]):not([data-icon]) {
    width: 100%;
    height: 100%;
    display: block;
  }

  &::before {
    content: attr(data-canvas-title);
    position: absolute;
    top: 12px;
    left: 16px;
    font-size: 0.85rem;
    font-weight: 600;
    color: $label-color;
    background: $label-bg;
    padding: 4px 10px;
    border-radius: 4px;
    border: 1px solid $label-border;
    z-index: 10;
    pointer-events: none;
    opacity: 0.9;
    letter-spacing: 0.02em;
  }
}

.canvas-container {
  @extend %canvas-box;
}
.canvas-embed-container {
  @extend %canvas-box;
}

// Node styles
.node {
  cursor: grab;
  transition: filter 0.2s ease;
  &:active {
    cursor: grabbing;
  }

  &.is-focused {
    .node-border-overlay {
      stroke: var(--lime) !important;
      stroke-width: 3px !important;
    }

    .node-content {
      cursor: text;
    }
  }

  &.node-file,
  &.node-text {
    cursor: pointer;
  }

  &.node-group {
    cursor: default;
    &:active {
      cursor: default;
    }
  }

  @each $name, $cfg in $node-type-styles {
    &.node-#{$name} {
      @include node-rect(
        map.get($cfg, fill),
        map.get($cfg, stroke),
        map.get($cfg, opacity),
        map.get($cfg, dash)
      );
    }
  }
}

.node-content {
  position: relative;
  padding: 0;
  font-size: 0.85rem;
  line-height: 1.4;
  overflow: hidden;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  word-wrap: break-word;

  &::-webkit-scrollbar {
    display: none;
  }

  scrollbar-width: none;
  -ms-overflow-style: none;
}

.node-text {
  padding: 12px;
  height: 100%;
  width: 100%;
  overflow: auto;
  @include md-body();

  a {
    pointer-events: all;
    cursor: pointer;
  }

  &::-webkit-scrollbar {
    display: none;
  }

  scrollbar-width: none;
  -ms-overflow-style: none;
}

.node-title-text {
  fill: var(--lightgray);
  font-weight: normal;
  transition: fill 0.2s ease;
  cursor: pointer;
  pointer-events: all;

  &:hover {
    fill: var(--secondary);
  }

  &.node-title-center {
    display: none;
  }
}

.node-file-content {
  height: 100%;
  padding: 12px;
  overflow-y: auto;
  overflow-x: hidden;
  @include md-body();

  a {
    pointer-events: all;
    cursor: pointer;
  }

  &::-webkit-scrollbar {
    display: none;
  }

  scrollbar-width: none;
  -ms-overflow-style: none;
}

.node-link {
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--dark);
  font-weight: 500;

  .link-icon {
    font-size: 1.2em;
    flex-shrink: 0;
  }
}

.node-group-label {
  fill: var(--lightgray);
  font-weight: normal;
  transition: fill 0.2s ease;
  cursor: default;
  pointer-events: none;
  user-select: none;

  &:hover {
    fill: var(--secondary);
  }
}

// Edges
.edge {
  pointer-events: none;
  line,
  path {
    stroke: var(--gray);
    stroke-width: 2px;
    opacity: 0.6;
    transition:
      opacity 0.2s ease,
      stroke-width 0.2s ease;
  }
  &:hover {
    line,
    path {
      opacity: 1;
      stroke-width: 3px;
    }
  }
}

.edge-label {
  fill: var(--gray);
  font-size: 0.75rem;
  pointer-events: none;
  user-select: none;
  font-weight: 500;
}

.edge-label-bg {
  pointer-events: none;
}

.edge-label-group {
  pointer-events: none;
}

// Tooltip
.canvas-tooltip {
  position: absolute;
  background: var(--light);
  border: 1px solid var(--border);
  border-radius: 4px;
  padding: 8px 12px;
  max-width: 300px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  font-size: 0.85rem;
  line-height: 1.4;
  z-index: 1000;
  pointer-events: none;
}

// Loading state
.canvas-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--gray);
  font-size: 1.1rem;
}

// Help modal
.canvas-help-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 1000;
  display: none;
  align-items: center;
  justify-content: center;

  &.is-visible {
    display: flex;
  }
}

.canvas-help-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  cursor: pointer;
}

.canvas-help-content {
  position: relative;
  background: var(--light);
  border: 1px solid var(--lightgray);
  border-radius: 8px;
  padding: 16px;
  max-width: 450px;
  width: 90%;
  max-height: 70vh;
  overflow: auto;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  z-index: 1;
}

.canvas-help-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 12px;
  border-bottom: 1px solid var(--lightgray);

  h2 {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    color: var(--dark);
  }
}

.canvas-help-close {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 6px;
  border-radius: 4px;
  color: var(--gray);
  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    background: var(--lightgray);
    color: var(--dark);
  }

  svg {
    width: 12px;
    height: 12px;
  }
}

.canvas-help-body {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.canvas-help-section {
  h3 {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--gray);
    margin: 0 0 8px 0;
  }
}

.canvas-help-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 0;
  font-size: 0.85rem;
  color: var(--dark);

  &:not(:last-child) {
    border-bottom: 1px solid var(--lightgray);
  }
}

.canvas-help-keys {
  display: flex;
  gap: 2px;
  align-items: center;
  font-size: 0.7rem;

  kbd {
    background: var(--lightgray);
    border: 1px solid var(--gray);
    border-radius: 2px;
    padding: 2px 4px;
    font-family: var(--codeFont);
    font-size: 0.75em;
    color: var(--dark);
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.06);
    line-height: 1;
  }
}

// Toolbar
.canvas-controls {
  position: absolute;
  top: 16px;
  right: 16px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  z-index: 100;
  pointer-events: none;
}

.canvas-control-group {
  display: flex;
  flex-direction: column;
  background: var(--light);
  border: 1px solid var(--lightgray);
  border-radius: var(--radius-s);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  pointer-events: all;
  overflow: hidden;
}

.canvas-control-item {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 28px;
  height: 28px;
  border-radius: 0;
  background: var(--light);
  border: none;
  border-bottom: 1px solid var(--lightgray);
  cursor: pointer;
  color: var(--gray);
  transition:
    background 0.2s ease,
    color 0.2s ease;

  &:last-child {
    border-bottom: none;
  }

  &:hover:not(.is-disabled) {
    background: var(--lightgray);
    color: var(--dark);
  }

  &:active:not(.is-disabled) {
    background: var(--gray);
  }

  &.is-active {
    color: var(--secondary);
  }

  &.is-disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  svg {
    width: 14px;
    height: 14px;
    pointer-events: none;
  }

  &[data-action="help"] svg {
    width: 12px;
    height: 12px;
  }
}

// Skeleton view (zoomed out)
.canvas-skeleton-view {
  .node-content {
    display: flex !important;
    align-items: center;
    justify-content: center;
    padding: 12px;
  }

  .node-file-content {
    display: none !important;
  }

  .node-text {
    display: flex !important;
    align-items: center;
    justify-content: center;
    background: var(--lightgray);
    border-radius: 4px;
    padding: 8px;
    width: 80%;
    height: 60%;

    * {
      display: none;
    }
  }

  .node-link {
    display: none !important;
  }

  .node .node-bg {
    fill: var(--light) !important;
    stroke: var(--gray) !important;
    fill-opacity: 0.5 !important;
  }

  .node-group .node-bg {
    fill-opacity: 0.2 !important;
  }

  .node-title-text {
    &.node-title-top {
      display: none !important;
    }

    &.node-title-center {
      display: block !important;
      font-weight: 600;
      font-size: 16px;
      fill: var(--dark);
    }
  }

  .node-group-label {
    display: block !important;
  }

  .edge path {
    opacity: 0.3 !important;
    stroke-width: 1px !important;
  }

  .edge-label-group {
    display: block !important;
    opacity: 0.6;
  }

  .edge-label {
    font-size: 0.7rem;
  }
}

// Responsive
@media all and ($mobile) {
  .canvas-container,
  .canvas-embed-container {
    height: 400px;
    min-height: 300px;
  }
  .node-content {
    font-size: 0.75rem;
    padding: 8px;
  }
  .edge-label {
    font-size: 0.65rem;
  }
}

// Dark mode
@media (prefers-color-scheme: dark) {
  .canvas-container,
  .canvas-embed-container {
    background: var(--dark);
    &::before {
      background: var(--dark);
      color: var(--lightgray);
      border-color: var(--gray);
    }
  }

  .node-text {
    color: var(--light);
    code,
    pre {
      background: var(--darkgray);
    }
    blockquote {
      color: var(--lightgray);
    }
  }

  .node-title-text {
    fill: var(--gray);

    &:hover {
      fill: var(--secondary);
    }
  }

  .node-file-content {
    color: var(--light);
    code {
      background: var(--darkgray);
    }
    a {
      color: var(--secondary);
    }
  }

  .node-link {
    color: var(--light);
  }
  .node-group-label {
    fill: var(--gray);

    &:hover {
      fill: var(--secondary);
    }
  }

  .canvas-control-group {
    background: var(--dark);
    border-color: var(--darkgray);
  }

  .canvas-control-item {
    background: var(--dark);
    color: var(--lightgray);
    border-bottom-color: var(--darkgray);

    &:hover:not(.is-disabled) {
      background: var(--darkgray);
      color: var(--light);
    }

    &:active:not(.is-disabled) {
      background: var(--gray);
    }
  }
  .canvas-tooltip {
    background: var(--dark);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .edge-label-bg {
    fill: var(--dark);
    stroke: var(--lightgray);
  }

  .canvas-skeleton-view {
    .node .node-bg {
      fill: var(--dark) !important;
      stroke: var(--lightgray) !important;
    }

    .node-text {
      background: var(--darkgray);
    }

    .node-title-text.node-title-center {
      fill: var(--light);
    }
  }

  .canvas-help-content {
    background: var(--dark);
    border-color: var(--darkgray);

    h2,
    .canvas-help-row {
      color: var(--light);
    }

    h3 {
      color: var(--lightgray);
    }

    .canvas-help-close {
      color: var(--lightgray);

      &:hover {
        background: var(--darkgray);
        color: var(--light);
      }
    }

    kbd {
      background: var(--darkgray);
      border-color: var(--gray);
      color: var(--light);
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
    }

    .canvas-help-row:not(:last-child) {
      border-bottom-color: var(--darkgray);
    }

    .canvas-help-header {
      border-bottom-color: var(--darkgray);
    }
  }

  .canvas-help-backdrop {
    background: rgba(0, 0, 0, 0.6);
  }
}

// Accent borders by Obsidian canvas color id
@each $id, $color in $canvas-accents {
  .node[data-color="#{$id}"] .node-bg,
  .node[data-color="#{$id}"] .node-border-overlay,
  .node-group[data-color="#{$id}"] .node-bg,
  .node-group[data-color="#{$id}"] .node-border-overlay {
    stroke: $color !important;
    stroke-width: 2px !important;
  }
}
