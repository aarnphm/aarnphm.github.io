import { i18n } from "../i18n"
import { FullSlug, joinSegments, pathToRoot } from "../util/path"
import { CSSResourceToStyleElement, JSResourceToScriptElement } from "../util/resources"
import { QuartzComponent, QuartzComponentConstructor, QuartzComponentProps } from "./types"
import { SocialImageOptions, defaultImageOptions } from "../util/og"
import { unescapeHTML } from "../util/escape"
import { googleFontHref } from "../util/theme"

export default (() => {
  let imageOptions: SocialImageOptions
  const fileDir = "social-images"
  const extension = "webp"

  const Head: QuartzComponent = ({ cfg, fileData, externalResources }: QuartzComponentProps) => {
    const titleSuffix = fileData.slug !== "index" ? (cfg.pageTitleSuffix ?? "") : ""
    const title =
      (fileData.frontmatter?.title ?? i18n(cfg.locale).propertyDefaults.title) + titleSuffix
    const description = unescapeHTML(
      fileData.frontmatter?.description ??
        fileData.description?.trim() ??
        i18n(cfg.locale).propertyDefaults.description,
    )
    const { css, js } = externalResources

    const fileName = fileData.slug?.replaceAll("/", "-") as string

    if (!imageOptions) {
      if (typeof cfg.generateSocialImages !== "boolean") {
        imageOptions = { ...defaultImageOptions, ...cfg.generateSocialImages }
      } else {
        imageOptions = defaultImageOptions
      }
    }

    const url = new URL(`https://${cfg.baseUrl ?? "example.com"}`)
    const path = url.pathname as FullSlug
    const baseDir = fileData.slug === "404" ? path : pathToRoot(fileData.slug!)

    const iconPath = joinSegments(baseDir, "static/icon.webp")

    const useDefaultOgImage = fileData === undefined || !cfg.generateSocialImages
    const ogImageDefaultPath = `https://${cfg.baseUrl}/static/og-image.webp`
    const ogImageGeneratedPath = `https://${cfg.baseUrl}/static/${fileDir}/${fileName}.${extension}`
    const frontmatterImgUrl = fileData.frontmatter?.socialImage
    // Use default og image if filePath doesnt exist (for autogenerated paths with no .md file)
    let ogImagePath: string
    if (frontmatterImgUrl !== undefined) {
      ogImagePath = `https://${cfg.baseUrl}/static/${frontmatterImgUrl}`
    } else if (
      (fileData.slug === "index" && imageOptions.excludeRoot) ||
      fileData.slug!.includes("university")
    ) {
      ogImagePath = ogImageDefaultPath
    } else {
      ogImagePath = useDefaultOgImage ? ogImageDefaultPath : ogImageGeneratedPath
    }

    const socialUrl =
      fileData.slug === "404" ? url.toString() : joinSegments(url.toString(), fileData.slug!)

    return (
      <head>
        <title>{title}</title>
        <meta charset="utf-8" />
        {cfg.theme.cdnCaching && cfg.theme.fontOrigin === "googleFonts" && (
          <>
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" />
            <link rel="stylesheet" href={googleFontHref(cfg.theme)} />
          </>
        )}
        <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin={"anonymous"} />
        <link rel="preconnect" href="https://unpkg.com" crossorigin={"anonymous"} />
        <link rel="preconnect" href="https://plausible.io" crossorigin={"anonymous"} />
        <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin={"anonymous"} />
        {cfg.baseUrl && (
          <>
            <link rel="alternate" type="application/rss+xml" title="rss feed" href="/index.xml" />
            <link rel="alternate" type="application/atom+xml" title="atom feed" href="/feed.xml" />
          </>
        )}
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        {/* OG/twitter meta tags */}
        <meta name="og:site_name" content={cfg.pageTitle} />
        <meta property="og:locale" content={cfg.locale} />
        <meta property="og:title" content={title} />
        <meta property="og:type" content="website" />
        <meta name="twitter:site" content="@aarnphm_" />
        <meta name="twitter:creator" content="@aarnphm_" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:widgets:theme" content="light" />
        <meta
          name="twitter:widgets:border-color"
          content={cfg.theme.colors["lightMode"].secondary}
        />
        {/*We will only load based on "nav" */}
        <meta name="twitter:widgets:autoload" content="off" />
        <meta property="og:description" content={description} />
        <meta property="og:image:type" content={`image/${extension}`} />
        <meta property="og:image:alt" content={description} />
        {!frontmatterImgUrl && cfg.generateSocialImages ? (
          <>
            <meta property="og:image:width" content={imageOptions.width.toString()} />
            <meta property="og:image:height" content={imageOptions.height.toString()} />
            <meta property="og:width" content={imageOptions.width.toString()} />
            <meta property="og:height" content={imageOptions.height.toString()} />
          </>
        ) : (
          <></>
        )}
        <meta property="og:image" content={ogImagePath} />
        {cfg.baseUrl && (
          <>
            <meta property="og:url" content={socialUrl} />
            <meta property="og:image" content={ogImagePath} />
            <meta name="twitter:image" content={ogImagePath} />
            <meta property="twitter:domain" content={url.toString()}></meta>
            <meta property="twitter:url" content={socialUrl}></meta>
          </>
        )}
        <link rel="icon" href={iconPath} />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="apple-touch-icon" href={iconPath} />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="shortcut icon" href="/favicon.ico" />
        <link rel="android-chrome" sizes="192x192" href="/android-chrome-192x192.png" />
        <link rel="android-chrome" sizes="512x512" href="/android-chrome-512x512.png" />
        <link rel="canonical" href={socialUrl} />
        <meta name="author" content="Aaron Pham" />
        {!fileData.slug!.includes("university") && (
          <>
            <meta
              name="pr:twitter"
              content={`https://${cfg.baseUrl}/static/twitter/${fileName}.png`}
            />
            <meta
              name="pr:instagram"
              content={`https://${cfg.baseUrl}/static/instagram/${fileName}.png`}
            />
          </>
        )}
        <meta name="description" content={description} />
        <meta name="generator" content="Quartz" />
        {css.map((resource) => CSSResourceToStyleElement(resource, true))}
        {js
          .filter((resource) => resource.loadTime === "beforeDOMReady")
          .map((res) => JSResourceToScriptElement(res, true))}
      </head>
    )
  }

  return Head
}) satisfies QuartzComponentConstructor
