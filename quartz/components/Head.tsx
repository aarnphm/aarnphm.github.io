import { i18n } from "../i18n"
import { FullSlug, joinSegments, pathToRoot } from "../util/path"
import { JSResourceToScriptElement } from "../util/resources"
import { QuartzComponent, QuartzComponentConstructor, QuartzComponentProps } from "./types"
import satori, { SatoriOptions } from "satori"
import fs from "fs"
import { ImageOptions, SocialImageOptions, getSatoriFont, og } from "../util/og"
import sharp from "sharp"
import { BuildCtx } from "../util/ctx"
import { unescapeHTML } from "../util/escape"

async function generateOg(
  ctx: BuildCtx,
  { cfg, description, fileDir, fileName, extension, fonts, title }: ImageOptions,
  userOpts: SocialImageOptions,
) {
  const fontBuffer = await fonts

  const imageElement = userOpts.imageStructure(cfg, userOpts, title, description, fontBuffer)

  const svg = await satori(imageElement, {
    height: userOpts.height,
    width: userOpts.width,
    fonts: fontBuffer,
  })

  const compressed = await sharp(Buffer.from(svg)).webp({ quality: 40 }).toBuffer()

  fs.writeFileSync(
    joinSegments(ctx.argv.output, "static", fileDir, `${fileName}.${extension}`),
    compressed,
  )
}
const defaultOptions: SocialImageOptions = {
  colorScheme: "lightMode",
  height: 630,
  width: 1200,
  imageStructure: og,
}

export default (() => {
  let fonts: Promise<SatoriOptions["fonts"]>
  let imageOptions: SocialImageOptions

  const socialImageDir = "social-images"
  const extension = "webp"

  const Head: QuartzComponent = ({
    ctx,
    cfg,
    fileData,
    externalResources,
  }: QuartzComponentProps) => {
    const imgDir = joinSegments(ctx.argv.output, "static", socialImageDir)

    const slug = fileData.filePath
    // since "/" is not a valid character in file names, replace with "-"
    const fileName = slug?.replaceAll("/", "-")

    const title = fileData.frontmatter?.title ?? i18n(cfg.locale).propertyDefaults.title
    const description = unescapeHTML(
      fileData.frontmatter?.socialDescription ??
        fileData.frontmatter?.description ??
        fileData.description?.trim() ??
        i18n(cfg.locale).propertyDefaults.description,
    )
    const { css, js } = externalResources

    if (cfg.generateSocialImages) {
      if (!imageOptions) {
        if (typeof cfg.generateSocialImages !== "boolean") {
          imageOptions = { ...defaultOptions, ...cfg.generateSocialImages }
        } else {
          imageOptions = defaultOptions
        }
      }

      if (!fonts) fonts = getSatoriFont(cfg)

      if (!fs.existsSync(imgDir)) {
        fs.mkdirSync(imgDir, { recursive: true })
      }

      if (fileName) {
        generateOg(
          ctx,
          { title, description, fileName, fileDir: socialImageDir, extension, fonts, cfg },
          imageOptions,
        )
      }
    }

    const url = new URL(`https://${cfg.baseUrl ?? "example.com"}`)
    const path = url.pathname as FullSlug
    const baseDir = fileData.slug === "404" ? path : pathToRoot(fileData.slug!)

    const iconPath = joinSegments(baseDir, "static/icon.webp")
    // const ogImagePath = `https://${cfg.baseUrl}/static/og-image.webp`

    const useDefaultOgImage = fileData === undefined || !cfg.generateSocialImages
    const frontmatterImgUrl =
      fileData.frontmatter?.socialImage ||
      fileData.frontmatter?.image ||
      fileData.frontmatter?.cover
    // Use default og image if filePath doesnt exist (for autogenerated paths with no .md file)
    const ogImagePath =
      frontmatterImgUrl !== undefined
        ? `https://${cfg.baseUrl}/static/${frontmatterImgUrl}`
        : useDefaultOgImage
          ? `https://${cfg.baseUrl}/static/og-image.webp`
          : `https://${cfg.baseUrl}/static/${socialImageDir}/${fileName}.${extension}`

    const socialUrl =
      fileData.slug === "404" ? url.toString() : joinSegments(url.toString(), fileData.slug!)

    return (
      <head>
        <title>{title}</title>
        <meta charSet="utf-8" />
        {cfg.theme.cdnCaching && (
          <>
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" />
          </>
        )}
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        {/* OG/jwitter meta tags */}
        <meta name="og:site_name" content={cfg.pageTitle}></meta>
        <meta property="og:title" content={title} />
        <meta property="og:type" content="website" />
        <meta name="twitter:site" content="@aarnphm_" />
        <meta name="twitter:creator" content="@aarnphm_" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta property="og:description" content={description} />
        <meta property="og:image:type" content={`image/${extension}`} />
        <meta property="og:image:alt" content={description} />
        {!frontmatterImgUrl && (
          <>
            <meta property="og:image:width" content={imageOptions.width.toString()} />
            <meta property="og:image:height" content={imageOptions.height.toString()} />
            <meta property="og:width" content={imageOptions.width.toString()} />
            <meta property="og:height" content={imageOptions.height.toString()} />
          </>
        )}
        <meta property="og:image:url" content={ogImagePath} />
        {cfg.baseUrl && (
          <>
            <meta name="twitter:image" content={ogImagePath} />
            <meta property="og:image" content={ogImagePath} />
            <meta property="twitter:domain" content={url.toString()}></meta>
            <meta property="og:url" content={socialUrl} />
            <meta property="twitter:url" content={socialUrl}></meta>
          </>
        )}
        <link rel="icon" href={iconPath} />
        <meta name="description" content={description} />
        <meta name="generator" content="Quartz" />
        {css.map((href) => (
          <link key={href} href={href} rel="stylesheet" type="text/css" spa-preserve />
        ))}
        {js
          .filter((resource) => resource.loadTime === "beforeDOMReady")
          .map((res) => JSResourceToScriptElement(res, true))}
      </head>
    )
  }

  return Head
}) satisfies QuartzComponentConstructor
